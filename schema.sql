-- Supabase/PostgreSQL Schema for AI Traveler Planner

-- ### 说明 ###
-- 本文件定义了 AI 旅行规划助手项目所需的核心数据表结构。
-- Supabase 默认会处理用户认证，并自动在 `auth` 模式下创建 `users` 表。
-- 因此，我们不需要手动创建 `users` 表。
-- 我们将创建一个 `profiles` 表来存储与用户相关的公开信息，并通过外键关联到 `auth.users` 表。

-- ### 表结构 ###

-- 1. profiles: 存储用户的公开信息，关联认证用户
CREATE TABLE public.profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  username TEXT,
  avatar_url TEXT,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.profiles IS '存储用户的公开信息，如用户名和头像。';
COMMENT ON COLUMN public.profiles.id IS '关联到 auth.users 表的用户 ID。';

-- 2. trips: 存储用户的旅行计划
CREATE TABLE public.trips (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  start_date DATE,
  end_date DATE,
  budget NUMERIC(10, 2),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.trips IS '存储用户的核心旅行计划信息。';
COMMENT ON COLUMN public.trips.user_id IS '创建此行程的用户 ID。';
COMMENT ON COLUMN public.trips.name IS '行程名称，例如“东京五日游”。';
COMMENT ON COLUMN public.trips.budget IS '旅行总预算。';

-- 3. trip_events: 存储行程中的具体事件（活动、住宿、交通等）
-- 创建一个事件类型的 ENUM，增加数据一致性
CREATE TYPE public.trip_event_type AS ENUM ('activity', 'accommodation', 'transport', 'dining');

CREATE TABLE public.trip_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  trip_id BIGINT REFERENCES public.trips(id) ON DELETE CASCADE NOT NULL,
  type public.trip_event_type NOT NULL,
  description TEXT,
  location TEXT,
  start_time TIMESTAMPTZ,
  end_time TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.trip_events IS '存储行程中的每一个具体活动安排。';
COMMENT ON COLUMN public.trip_events.type IS '事件类型（活动、住宿、交通、餐饮）。';
COMMENT ON COLUMN public.trip_events.location IS '事件发生的地理位置名称或地址。';

-- 4. expenses: 存储旅行过程中的开销记录
-- 创建一个开销类别的 ENUM
CREATE TYPE public.expense_category AS ENUM ('transport', 'food', 'lodging', 'shopping', 'entertainment', 'other');

CREATE TABLE public.expenses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  trip_id BIGINT REFERENCES public.trips(id) ON DELETE CASCADE NOT NULL,
  amount NUMERIC(10, 2) NOT NULL,
  category public.expense_category NOT NULL,
  description TEXT,
  expense_date DATE NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

COMMENT ON TABLE public.expenses IS '记录旅行过程中的每一笔开销。';
COMMENT ON COLUMN public.expenses.amount IS '开销金额。';
COMMENT ON COLUMN public.expenses.category IS '开销类别（交通、餐饮、住宿等）。';
COMMENT ON COLUMN public.expenses.expense_date IS '消费发生的日期。';

-- ### 启用行级安全 (Row Level Security - RLS) ###
-- 为了数据安全，建议为每个表启用 RLS，并设置相应的策略，确保用户只能访问自己的数据。

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.trips ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.trip_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.expenses ENABLE ROW LEVEL SECURITY;

-- RLS 策略示例：用户只能查看和操作自己的 profiles
CREATE POLICY "Users can view their own profile."
  ON public.profiles FOR SELECT
  USING (auth.uid() = id);

CREATE POLICY "Users can update their own profile."
  ON public.profiles FOR UPDATE
  USING (auth.uid() = id);

-- RLS 策略示例：用户只能操作自己的 trips
CREATE POLICY "Users can manage their own trips."
  ON public.trips FOR ALL
  USING (auth.uid() = user_id);

-- RLS 策略示例：用户只能操作自己行程下的 events
CREATE POLICY "Users can manage events in their own trips."
  ON public.trip_events FOR ALL
  USING (auth.uid() = (SELECT user_id FROM public.trips WHERE id = trip_id));

-- RLS 策略示例：用户只能操作自己行程下的 expenses
CREATE POLICY "Users can manage expenses in their own trips."
  ON public.expenses FOR ALL
  USING (auth.uid() = (SELECT user_id FROM public.trips WHERE id = trip_id));
